#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <limits>
#include <iterator>
#include <functional>
#include <iomanip>
#include <numeric>
#include <cerrno>
#include <ctime>
#include <deque>

// Util function to find minimum sum for a path 
int minSumPath(std::vector<std::vector<int> >& A, const int s)
{
	// For storing the result in a 1-D array, 
	// and simultaneously updating the result. 
	std::vector<int> memo(A.size());
	int n = A.size() - 1;
	int i, j, lm, p;
	std::vector<int> pa;
	std::deque<int> pq;

	// For the bottom row 
	for (i = 0; i < A[n].size(); i++) {
		memo[i] = A[n][i];
	}
	
	// Calculation of the remaining rows, 
	// in bottom up manner. 
	for ( i = A.size() - 2; i >= 0; i--) {
		for ( j = 0; j < A[i + 1].size() - 1; j++) {
			lm = std::min(memo[j], memo[j+1]);
			memo[j] = A[i][j] + lm;
			p = A[i+1][j];
			}
		pa.push_back(p);
		pq.push_front(p);
		//std::cout << p << " , "<< std::endl;
	}
	std::cout << "<----------Tri-Minimum Sum Path --------------> " << std::endl;	
	std::cout << "<-Automatically Navigates Min effort path from top----> " << std::endl;
	std::cout << "<Top Down using Deque-> " << std::endl;
	pa.push_back(A[0][0]);
	pq.push_front(A[0][0]);
	for (auto a : pq)
		std::cout  << a << " ," << std::endl;
	
	for (int a : pa)
		std::cout << " ," << a ;

	std::cout << "<------TOP using vector" << std::endl;
	std::cout << "\nmin path sum is : "<< std::endl;
	// return the top element 
	return memo[0];
}


std::vector<int> vecgen(std::vector<int> &v) {
	for (int val : v)
		std::generate(v.begin(), v.end(), []() {
		return rand() % 1000;
	});
	return v;
}

void tabs(int it, int r) {
	for (int i=0; i < (r-it)/2; i++)
	std::cout << "     ";
}


/* Driver program to test above functions */
int main()
{
	const int h = 15;//want traingle 1p high
	std::vector<int> row(h);
	srand(time(NULL));

	std::vector<std::vector<int> > A(h);
	for (int i = 1; i < h+1; i++) {
		std::vector<int> row(i);
		A[i-1] = std::vector<int>(vecgen(row));
	}

	
	std::cout << minSumPath(A, h) << std::endl;

	std::cout << "Random Number Triangle Generated by Lambda Functor" << std::endl;
	for (int i = 0; i < h; i++) {
		tabs(i, h);
		for (int val : A[i]) 
			std::cout << val << "   ";
		std::cout << std::endl;
	}
	return 0;
}
